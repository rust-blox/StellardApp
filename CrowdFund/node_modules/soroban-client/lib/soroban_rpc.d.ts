import { AssetType } from "stellar-base";
import * as jsonrpc from "./jsonrpc";
export declare namespace SorobanRpc {
    interface Balance {
        asset_type: AssetType.credit4 | AssetType.credit12;
        asset_code: string;
        asset_issuer: string;
        classic: string;
        smart: string;
    }
    interface Cost {
        cpuInsns: string;
        memBytes: string;
    }
    interface GetHealthResponse {
        status: "healthy";
    }
    interface LedgerEntryResult {
        key: string;
        xdr: string;
        lastModifiedLedgerSeq?: number;
    }
    interface GetLedgerEntriesResponse {
        entries: LedgerEntryResult[] | null;
        latestLedger: number;
    }
    interface GetNetworkResponse {
        friendbotUrl?: string;
        passphrase: string;
        protocolVersion: string;
    }
    interface GetLatestLedgerResponse {
        id: string;
        sequence: number;
        protocolVersion: string;
    }
    type GetTransactionStatus = "SUCCESS" | "NOT_FOUND" | "FAILED";
    interface GetTransactionResponse {
        status: GetTransactionStatus;
        latestLedger: number;
        latestLedgerCloseTime: number;
        oldestLedger: number;
        oldestLedgerCloseTime: number;
        applicationOrder?: number;
        feeBump?: boolean;
        envelopeXdr?: string;
        resultXdr?: string;
        resultMetaXdr?: string;
        ledger?: number;
        createdAt?: number;
    }
    type EventType = "contract" | "system" | "diagnostic";
    interface EventFilter {
        type?: EventType;
        contractIds?: string[];
        topics?: string[][];
    }
    interface GetEventsResponse {
        events?: EventResponse[];
    }
    interface EventResponse {
        ledger: string;
        ledgerClosedAt: string;
        contractId: string;
        id: string;
        pagingToken: string;
        inSuccessfulContractCall: boolean;
        topic: string[];
        value: {
            xdr: string;
        };
    }
    interface RequestAirdropResponse {
        transaction_id: string;
    }
    type SendTransactionStatus = "PENDING" | "DUPLICATE" | "TRY_AGAIN_LATER" | "ERROR";
    interface SendTransactionResponse {
        status: SendTransactionStatus;
        errorResultXdr?: string;
        hash: string;
        latestLedger: number;
        latestLedgerCloseTime: number;
    }
    interface SimulateHostFunctionResult {
        auth?: string[];
        xdr: string;
    }
    interface SimulateTransactionResponse {
        id: string;
        error?: jsonrpc.Error;
        transactionData: string;
        events: string[];
        minResourceFee: string;
        results: SimulateHostFunctionResult[];
        latestLedger: number;
        cost: Cost;
    }
}
