{"version":3,"file":"xdr.js","mappings":"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","sources":["webpack://XDR/webpack/universalModuleDefinition","webpack://XDR/./src/browser.js","webpack://XDR/./src/errors.js","webpack://XDR/./src/serialization/xdr-reader.js","webpack://XDR/./src/serialization/xdr-writer.js","webpack://XDR/./src/xdr-type.js","webpack://XDR/./src/int.js","webpack://XDR/./src/bigint-encoder.js","webpack://XDR/./src/large-int.js","webpack://XDR/./src/hyper.js","webpack://XDR/./src/unsigned-int.js","webpack://XDR/./src/unsigned-hyper.js","webpack://XDR/./src/float.js","webpack://XDR/./src/double.js","webpack://XDR/./src/quadruple.js","webpack://XDR/./src/bool.js","webpack://XDR/./src/string.js","webpack://XDR/./src/opaque.js","webpack://XDR/./src/var-opaque.js","webpack://XDR/./src/array.js","webpack://XDR/./src/var-array.js","webpack://XDR/./src/option.js","webpack://XDR/./src/void.js","webpack://XDR/./src/enum.js","webpack://XDR/./src/reference.js","webpack://XDR/./src/struct.js","webpack://XDR/./src/union.js","webpack://XDR/./src/config.js","webpack://XDR/./node_modules/base64-js/index.js","webpack://XDR/./node_modules/buffer/index.js","webpack://XDR/./node_modules/ieee754/index.js","webpack://XDR/webpack/bootstrap","webpack://XDR/webpack/runtime/define property getters","webpack://XDR/webpack/runtime/global","webpack://XDR/webpack/runtime/hasOwnProperty shorthand","webpack://XDR/webpack/runtime/make namespace object","webpack://XDR/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"XDR\"] = factory();\n\telse\n\t\troot[\"XDR\"] = factory();\n})(this, () => {\nreturn ","// eslint-disable-next-line prefer-import/prefer-import-over-require\nconst exports = require('./index');\nmodule.exports = exports;\n","export class XdrWriterError extends TypeError {\n  constructor(message) {\n    super(`XDR Write Error: ${message}`);\n  }\n}\n\nexport class XdrReaderError extends TypeError {\n  constructor(message) {\n    super(`XDR Read Error: ${message}`);\n  }\n}\n\nexport class XdrDefinitionError extends TypeError {\n  constructor(message) {\n    super(`XDR Type Definition Error: ${message}`);\n  }\n}\n\nexport class XdrNotImplementedDefinitionError extends XdrDefinitionError {\n  constructor() {\n    super(`method not implemented, it should be overloaded in the descendant class.`);\n  }\n}","/**\n * @internal\n */\nimport { XdrReaderError } from '../errors';\n\nexport class XdrReader {\n  /**\n   * @constructor\n   * @param {Buffer} source - Buffer containing serialized data\n   */\n  constructor(source) {\n    if (!Buffer.isBuffer(source)) {\n      if (source instanceof Array) {\n        source = Buffer.from(source)\n      } else {\n        throw new XdrReaderError('source not specified');\n      }\n    }\n\n    this._buffer = source;\n    this._length = source.length;\n    this._index = 0;\n  }\n\n  /**\n   * @type {Buffer}\n   * @private\n   * @readonly\n   */\n  _buffer\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _length\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _index\n\n  /**\n   * Check if the reader reached the end of the input buffer\n   * @return {Boolean}\n   */\n  get eof() {\n    return this._index === this._length;\n  }\n\n  /**\n   * Advance reader position, check padding and overflow\n   * @param {Number} size - Bytes to read\n   * @return {Number} Position to read from\n   * @private\n   */\n  advance(size) {\n    const from = this._index;\n    // advance cursor position\n    this._index += size;\n    // check buffer boundaries\n    if (this._length < this._index)\n      throw new XdrReaderError('attempt to read outside the boundary of the buffer');\n    // check that padding is correct for Opaque and String\n    const padding = 4 - (size % 4 || 4);\n    if (padding > 0) {\n      for (let i = 0; i < padding; i++)\n        if (this._buffer[this._index + i] !== 0) // all bytes in the padding should be zeros\n          throw new XdrReaderError('invalid padding');\n      this._index += padding;\n    }\n    return from;\n  }\n\n  /**\n   * Reset reader position\n   * @return {void}\n   */\n  rewind() {\n    this._index = 0\n  }\n\n  /**\n   * Read byte array from the buffer\n   * @param {Number} size - Bytes to read\n   * @return {Buffer} - Sliced portion of the underlying buffer\n   */\n  read(size) {\n    const from = this.advance(size);\n    return this._buffer.subarray(from, from + size);\n  }\n\n  /**\n   * Read i32 from buffer\n   * @return {Number}\n   */\n  readInt32BE() {\n    return this._buffer.readInt32BE(this.advance(4));\n  }\n\n  /**\n   * Read u32 from buffer\n   * @return {Number}\n   */\n  readUInt32BE() {\n    return this._buffer.readUInt32BE(this.advance(4));\n  }\n\n  /**\n   * Read i64 from buffer\n   * @return {BigInt}\n   */\n  readBigInt64BE() {\n    return this._buffer.readBigInt64BE(this.advance(8));\n  }\n\n  /**\n   * Read u64 from buffer\n   * @return {BigInt}\n   */\n  readBigUInt64BE() {\n    return this._buffer.readBigUInt64BE(this.advance(8));\n  }\n\n  /**\n   * Read float from buffer\n   * @return {Number}\n   */\n  readFloatBE() {\n    return this._buffer.readFloatBE(this.advance(4));\n  }\n\n  /**\n   * Read double from buffer\n   * @return {Number}\n   */\n  readDoubleBE() {\n    return this._buffer.readDoubleBE(this.advance(8));\n  }\n\n  /**\n   * Ensure that input buffer has been consumed in full, otherwise it's a type mismatch\n   * @return {void}\n   * @throws {XdrReaderError}\n   */\n  ensureInputConsumed() {\n    if (this._index !== this._length)\n      throw new XdrReaderError(`invalid XDR contract typecast - source buffer not entirely consumed`);\n  }\n}\n","const BUFFER_CHUNK = 8192; // 8 KB chunk size increment\n\n/**\n * @internal\n */\nexport class XdrWriter {\n  /**\n   * @param {Buffer|Number} [buffer] - Optional destination buffer\n   */\n  constructor(buffer) {\n    if (typeof buffer === 'number') {\n      buffer = Buffer.allocUnsafe(buffer);\n    } else if (!(buffer instanceof Buffer)) {\n      buffer = Buffer.allocUnsafe(BUFFER_CHUNK);\n    }\n    this._buffer = buffer;\n    this._length = buffer.length;\n  }\n\n  /**\n   * @type {Buffer}\n   * @private\n   * @readonly\n   */\n  _buffer\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _length\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _index = 0\n\n  /**\n   * Advance writer position, write padding if needed, auto-resize the buffer\n   * @param {Number} size - Bytes to write\n   * @return {Number} Position to read from\n   * @private\n   */\n  alloc(size) {\n    const from = this._index;\n    // advance cursor position\n    this._index += size;\n    // ensure sufficient buffer size\n    if (this._length < this._index) {\n      this.resize(this._index)\n    }\n    return from;\n  }\n\n  /**\n   * Increase size of the underlying buffer\n   * @param {Number} minRequiredSize - Minimum required buffer size\n   * @return {void}\n   * @private\n   */\n  resize(minRequiredSize) {\n    // calculate new length, align new buffer length by chunk size\n    const newLength = Math.ceil(minRequiredSize / BUFFER_CHUNK) * BUFFER_CHUNK;\n    // create new buffer and copy previous data\n    const newBuffer = Buffer.allocUnsafe(newLength)\n    this._buffer.copy(newBuffer, 0, 0, this._length)\n    // update references\n    this._buffer = newBuffer\n    this._length = newLength\n  }\n\n  /**\n   * Return XDR-serialized value\n   * @return {Buffer}\n   */\n  finalize() {\n    // clip underlying buffer to the actually written value\n    return this._buffer.subarray(0, this._index)\n  }\n\n  /**\n   * Return XDR-serialized value as byte array\n   * @return {Number[]}\n   */\n  toArray() {\n    return [...this.finalize()]\n  }\n\n  /**\n   * Write byte array from the buffer\n   * @param {Buffer|String} value - Bytes/string to write\n   * @param {Number} size - Size in bytes\n   * @return {XdrReader} - XdrReader wrapper on top of a subarray\n   */\n  write(value, size) {\n    if (typeof value === 'string') {\n      // serialize string directly to the output buffer\n      const offset = this.alloc(size);\n      this._buffer.write(value, offset, 'utf8');\n    } else {\n      // copy data to the output buffer\n      if (!(value instanceof Buffer)) {\n        value = Buffer.from(value);\n      }\n      const offset = this.alloc(size);\n      value.copy(this._buffer, offset, 0, size);\n    }\n\n    // add padding for 4-byte XDR alignment\n    const padding = 4 - (size % 4 || 4);\n    if (padding > 0) {\n      const offset = this.alloc(padding);\n      this._buffer.fill(0, offset, this._index);\n    }\n  }\n\n  /**\n   * Write i32 from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeInt32BE(value) {\n    const offset = this.alloc(4);\n    this._buffer.writeInt32BE(value, offset);\n  }\n\n  /**\n   * Write u32 from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeUInt32BE(value) {\n    const offset = this.alloc(4);\n    this._buffer.writeUInt32BE(value, offset);\n  }\n\n  /**\n   * Write i64 from buffer\n   * @param {BigInt} value - Value to serialize\n   * @return {void}\n   */\n  writeBigInt64BE(value) {\n    const offset = this.alloc(8);\n    this._buffer.writeBigInt64BE(value, offset);\n  }\n\n  /**\n   * Write u64 from buffer\n   * @param {BigInt} value - Value to serialize\n   * @return {void}\n   */\n  writeBigUInt64BE(value) {\n    const offset = this.alloc(8);\n    this._buffer.writeBigUInt64BE(value, offset);\n\n  }\n\n  /**\n   * Write float from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeFloatBE(value) {\n    const offset = this.alloc(4);\n    this._buffer.writeFloatBE(value, offset);\n  }\n\n  /**\n   * Write double from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeDoubleBE(value) {\n    const offset = this.alloc(8);\n    this._buffer.writeDoubleBE(value, offset);\n  }\n\n  static bufferChunkSize = BUFFER_CHUNK;\n}","import { XdrReader } from './serialization/xdr-reader';\nimport { XdrWriter } from './serialization/xdr-writer';\nimport { XdrNotImplementedDefinitionError } from './errors';\n\nclass XdrType {\n  /**\n   * Encode value to XDR format\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {String|Buffer}\n   */\n  toXDR(format = 'raw') {\n    if (!this.write)\n      return this.constructor.toXDR(this, format);\n\n    const writer = new XdrWriter();\n    this.write(this, writer);\n    return encodeResult(writer.finalize(), format);\n  }\n\n  /**\n   * Decode XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {this}\n   */\n  fromXDR(input, format = 'raw') {\n    if (!this.read)\n      return this.constructor.fromXDR(input, format);\n\n    const reader = new XdrReader(decodeInput(input, format));\n    const result = this.read(reader);\n    reader.ensureInputConsumed();\n    return result;\n  }\n\n  /**\n   * Check whether input contains a valid XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {Boolean}\n   */\n  validateXDR(input, format = 'raw') {\n    try {\n      this.fromXDR(input, format);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Encode value to XDR format\n   * @param {this} value - Value to serialize\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {Buffer}\n   */\n  static toXDR(value, format = 'raw') {\n    const writer = new XdrWriter();\n    this.write(value, writer);\n    return encodeResult(writer.finalize(), format);\n  }\n\n  /**\n   * Decode XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {this}\n   */\n  static fromXDR(input, format = 'raw') {\n    const reader = new XdrReader(decodeInput(input, format));\n    const result = this.read(reader);\n    reader.ensureInputConsumed();\n    return result;\n  }\n\n  /**\n   * Check whether input contains a valid XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {Boolean}\n   */\n  static validateXDR(input, format = 'raw') {\n    try {\n      this.fromXDR(input, format);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\nexport class XdrPrimitiveType extends XdrType {\n  /**\n   * Read value from the XDR-serialized input\n   * @param {XdrReader} reader - XdrReader instance\n   * @return {this}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  static read(reader) {\n    throw new XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Write XDR value to the buffer\n   * @param {this} value - Value to write\n   * @param {XdrWriter} writer - XdrWriter instance\n   * @return {void}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  static write(value, writer) {\n    throw new XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Check whether XDR primitive value is valid\n   * @param {this} value - Value to check\n   * @return {Boolean}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  static isValid(value) {\n    return false;\n  }\n}\n\nexport class XdrCompositeType extends XdrType {\n  // Every descendant should implement two methods: read(reader) and write(value, writer)\n\n  /**\n   * Check whether XDR primitive value is valid\n   * @param {this} value - Value to check\n   * @return {Boolean}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  isValid(value) {\n    return false;\n  }\n}\n\nclass InvalidXdrEncodingFormatError extends TypeError {\n  constructor(format) {\n    super(`Invalid format ${format}, must be one of \"raw\", \"hex\", \"base64\"`);\n  }\n}\n\nfunction encodeResult(buffer, format) {\n  switch (format) {\n    case 'raw':\n      return buffer;\n    case 'hex':\n      return buffer.toString('hex');\n    case 'base64':\n      return buffer.toString('base64');\n    default:\n      throw new InvalidXdrEncodingFormatError(format);\n  }\n}\n\nfunction decodeInput(input, format) {\n  switch (format) {\n    case 'raw':\n      return input;\n    case 'hex':\n      return Buffer.from(input, 'hex');\n    case 'base64':\n      return Buffer.from(input, 'base64');\n    default:\n      throw new InvalidXdrEncodingFormatError(format);\n  }\n}\n\n/**\n * @typedef {'raw'|'hex'|'base64'} XdrEncodingFormat\n */\n","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nconst MAX_VALUE = 2147483647;\nconst MIN_VALUE = -2147483648;\n\nexport class Int extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readInt32BE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number')\n      throw new XdrWriterError('not a number');\n\n    if ((value | 0) !== value)\n      throw new XdrWriterError('invalid i32 value');\n\n    writer.writeInt32BE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    if (typeof value !== 'number' || (value | 0) !== value) {\n      return false;\n    }\n\n    return value >= MIN_VALUE && value <= MAX_VALUE;\n  }\n}\n\nInt.MAX_VALUE = MAX_VALUE;\nInt.MIN_VALUE = -MIN_VALUE;\n","/**\n * Encode a native `bigint` value from a list of arbitrary integer-like values.\n *\n * @param {Array<number|bigint|string>} parts - Slices to encode in big-endian\n *    format (i.e. earlier elements are higher bits)\n * @param {64|128|256} size - Number of bits in the target integer type\n * @param {boolean} unsigned - Whether it's an unsigned integer\n *\n * @returns {bigint}\n */\nexport function encodeBigIntFromBits(parts, size, unsigned) {\n  if (!(parts instanceof Array)) {\n    // allow a single parameter instead of an array\n    parts = [parts];\n  } else if (parts.length && parts[0] instanceof Array) {\n    // unpack nested array param\n    parts = parts[0];\n  }\n\n  const total = parts.length;\n  const sliceSize = size / total;\n  switch (sliceSize) {\n    case 32:\n    case 64:\n    case 128:\n    case 256:\n      break;\n\n    default:\n      throw new RangeError(\n        `expected slices to fit in 32/64/128/256 bits, got ${parts}`\n      );\n  }\n\n  // normalize all inputs to bigint\n  try {\n    for (let i = 0; i < parts.length; i++) {\n      if (typeof parts[i] !== 'bigint') {\n        parts[i] = BigInt(parts[i].valueOf());\n      }\n    }\n  } catch (e) {\n    throw new TypeError(`expected bigint-like values, got: ${parts} (${e})`);\n  }\n\n  // check for sign mismatches for single inputs (this is a special case to\n  // handle one parameter passed to e.g. UnsignedHyper et al.)\n  // see https://github.com/stellar/js-xdr/pull/100#discussion_r1228770845\n  if (unsigned && parts.length === 1 && parts[0] < 0n) {\n    throw new RangeError(`expected a positive value, got: ${parts}`);\n  }\n\n  // encode in big-endian fashion, shifting each slice by the slice size\n  let result = BigInt.asUintN(sliceSize, parts[0]); // safe: len >= 1\n  for (let i = 1; i < parts.length; i++) {\n    result |= BigInt.asUintN(sliceSize, parts[i]) << BigInt(i * sliceSize);\n  }\n\n  // interpret value as signed if necessary and clamp it\n  if (!unsigned) {\n    result = BigInt.asIntN(size, result);\n  }\n\n  // check boundaries\n  const [min, max] = calculateBigIntBoundaries(size, unsigned);\n  if (result >= min && result <= max) {\n    return result;\n  }\n\n  // failed to encode\n  throw new TypeError(\n    `bigint values [${parts}] for ${formatIntName(\n      size,\n      unsigned\n    )} out of range [${min}, ${max}]: ${result}`\n  );\n}\n\n/**\n * Transforms a single bigint value that's supposed to represent a `size`-bit\n * integer into a list of `sliceSize`d chunks.\n *\n * @param {bigint} value - Single bigint value to decompose\n * @param {64|128|256} iSize - Number of bits represented by `value`\n * @param {32|64|128} sliceSize - Number of chunks to decompose into\n * @return {bigint[]}\n */\nexport function sliceBigInt(value, iSize, sliceSize) {\n  if (typeof value !== 'bigint') {\n    throw new TypeError(`Expected bigint 'value', got ${typeof value}`);\n  }\n\n  const total = iSize / sliceSize;\n  if (total === 1) {\n    return [value];\n  }\n\n  if (\n    sliceSize < 32 ||\n    sliceSize > 128 ||\n    (total !== 2 && total !== 4 && total !== 8)\n  ) {\n    throw new TypeError(\n      `invalid bigint (${value}) and slice size (${iSize} -> ${sliceSize}) combination`\n    );\n  }\n\n  const shift = BigInt(sliceSize);\n\n  // iterate shift and mask application\n  const result = new Array(total);\n  for (let i = 0; i < total; i++) {\n    // we force a signed interpretation to preserve sign in each slice value,\n    // but downstream can convert to unsigned if it's appropriate\n    result[i] = BigInt.asIntN(sliceSize, value); // clamps to size\n\n    // move on to the next chunk\n    value >>= shift;\n  }\n\n  return result;\n}\n\nexport function formatIntName(precision, unsigned) {\n  return `${unsigned ? 'u' : 'i'}${precision}`;\n}\n\n/**\n * Get min|max boundaries for an integer with a specified bits size\n * @param {64|128|256} size - Number of bits in the source integer type\n * @param {Boolean} unsigned - Whether it's an unsigned integer\n * @return {BigInt[]}\n */\nexport function calculateBigIntBoundaries(size, unsigned) {\n  if (unsigned) {\n    return [0n, (1n << BigInt(size)) - 1n];\n  }\n\n  const boundary = 1n << BigInt(size - 1);\n  return [0n - boundary, boundary - 1n];\n}\n","import { XdrPrimitiveType } from './xdr-type';\nimport { calculateBigIntBoundaries, encodeBigIntFromBits, sliceBigInt } from './bigint-encoder';\nimport { XdrNotImplementedDefinitionError, XdrWriterError } from './errors';\n\nexport class LargeInt extends XdrPrimitiveType {\n  /**\n   * @param {Array<Number|BigInt|String>} parts - Slices to encode\n   */\n  constructor(args) {\n    super();\n    this._value = encodeBigIntFromBits(args, this.size, this.unsigned);\n  }\n\n  /**\n   * Signed/unsigned representation\n   * @type {Boolean}\n   * @abstract\n   */\n  get unsigned() {\n    throw new XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Size of the integer in bits\n   * @type {Number}\n   * @abstract\n   */\n  get size() {\n    throw new XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Slice integer to parts with smaller bit size\n   * @param {32|64|128} sliceSize - Size of each part in bits\n   * @return {BigInt[]}\n   */\n  slice(sliceSize) {\n    return sliceBigInt(this._value, this.size, sliceSize);\n  }\n\n  toString() {\n    return this._value.toString();\n  }\n\n  toJSON() {\n    return {_value: this._value.toString()}\n  }\n\n  toBigInt() {\n    return BigInt(this._value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const {size} = this.prototype;\n    if (size === 64)\n      return new this(reader.readBigUInt64BE());\n    return new this(...Array.from({length: size / 64}, () => reader.readBigUInt64BE()).reverse());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (value instanceof this) {\n      value = value._value;\n    } else if (typeof value !== 'bigint' || value > this.MAX_VALUE || value < this.MIN_VALUE)\n      throw new XdrWriterError(`${value} is not a ${this.name}`);\n\n    const {unsigned, size} = this.prototype;\n    if (size === 64) {\n      if (unsigned) {\n        writer.writeBigUInt64BE(value);\n      } else {\n        writer.writeBigInt64BE(value);\n      }\n    } else {\n      for (const part of sliceBigInt(value, size, 64).reverse()) {\n        if (unsigned) {\n          writer.writeBigUInt64BE(part);\n        } else {\n          writer.writeBigInt64BE(part);\n        }\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'bigint' || (value instanceof this);\n  }\n\n  /**\n   * Create instance from string\n   * @param {String} string - Numeric representation\n   * @return {LargeInt}\n   */\n  static fromString(string) {\n    return new this(string);\n  }\n\n  static MAX_VALUE = 0n;\n\n  static MIN_VALUE = 0n;\n\n  /**\n   * @internal\n   * @return {void}\n   */\n  static defineIntBoundaries() {\n    const [min, max] = calculateBigIntBoundaries(this.prototype.size, this.prototype.unsigned);\n    this.MIN_VALUE = min;\n    this.MAX_VALUE = max;\n  }\n}","import { LargeInt } from './large-int';\n\nexport class Hyper extends LargeInt {\n  /**\n   * @param {Array<Number|BigInt|String>} parts - Slices to encode\n   */\n  constructor(...args) {\n    super(args);\n  }\n\n  get low() {\n    return Number(this._value & 0xFFFFFFFFn) << 0;\n  }\n\n  get high() {\n    return Number(this._value >> 32n) >> 0;\n  }\n\n  get size() {\n    return 64;\n  }\n\n  get unsigned() {\n    return false;\n  }\n\n  /**\n   * Create Hyper instance from two [high][low] i32 values\n   * @param {Number} low - Low part of i64 number\n   * @param {Number} high - High part of i64 number\n   * @return {LargeInt}\n   */\n  static fromBits(low, high) {\n    return new this(low, high);\n  }\n}\n\nHyper.defineIntBoundaries();\n","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nconst MAX_VALUE = 4294967295;\nconst MIN_VALUE = 0;\n\nexport class UnsignedInt extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readUInt32BE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number' || !(value >= MIN_VALUE && value <= MAX_VALUE) || value % 1 !== 0)\n      throw new XdrWriterError('invalid u32 value');\n\n    writer.writeUInt32BE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    if (typeof value !== 'number' || value % 1 !== 0) {\n      return false;\n    }\n\n    return value >= MIN_VALUE && value <= MAX_VALUE;\n  }\n}\n\nUnsignedInt.MAX_VALUE = MAX_VALUE;\nUnsignedInt.MIN_VALUE = MIN_VALUE;\n","import { LargeInt } from './large-int';\n\nexport class UnsignedHyper extends LargeInt {\n  /**\n   * @param {Array<Number|BigInt|String>} parts - Slices to encode\n   */\n  constructor(...args) {\n    super(args);\n  }\n\n  get low() {\n    return Number(this._value & 0xFFFFFFFFn) << 0;\n  }\n\n  get high() {\n    return Number(this._value >> 32n) >> 0;\n  }\n\n  get size() {\n    return 64;\n  }\n\n  get unsigned() {\n    return true;\n  }\n\n  /**\n   * Create UnsignedHyper instance from two [high][low] i32 values\n   * @param {Number} low - Low part of u64 number\n   * @param {Number} high - High part of u64 number\n   * @return {UnsignedHyper}\n   */\n  static fromBits(low, high) {\n    return new this(low, high);\n  }\n}\n\nUnsignedHyper.defineIntBoundaries();\n","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Float extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readFloatBE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number')\n      throw new XdrWriterError('not a number');\n\n    writer.writeFloatBE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'number';\n  }\n}\n","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Double extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readDoubleBE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number')\n      throw new XdrWriterError('not a number');\n\n    writer.writeDoubleBE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'number';\n  }\n}\n","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrDefinitionError } from './errors';\n\nexport class Quadruple extends XdrPrimitiveType {\n  static read() {\n    throw new XdrDefinitionError('quadruple not supported');\n  }\n\n  static write() {\n    throw new XdrDefinitionError('quadruple not supported');\n  }\n\n  static isValid() {\n    return false;\n  }\n}\n","import { Int } from './int';\nimport { XdrPrimitiveType } from './xdr-type';\nimport { XdrReaderError } from './errors';\n\nexport class Bool extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const value = Int.read(reader);\n\n    switch (value) {\n      case 0:\n        return false;\n      case 1:\n        return true;\n      default:\n        throw new XdrReaderError(`got ${value} when trying to read a bool`);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    const intVal = value ? 1 : 0;\n    Int.write(intVal, writer);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'boolean';\n  }\n}","import { UnsignedInt } from './unsigned-int';\nimport { XdrCompositeType } from './xdr-type';\nimport { XdrReaderError, XdrWriterError } from './errors';\n\nexport class String extends XdrCompositeType {\n  constructor(maxLength = UnsignedInt.MAX_VALUE) {\n    super();\n    this._maxLength = maxLength;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    const size = UnsignedInt.read(reader);\n    if (size > this._maxLength)\n      throw new XdrReaderError(`saw ${size} length String, max allowed is ${this._maxLength}`);\n\n    return reader.read(size);\n  }\n\n  readString(reader) {\n    return this.read(reader).toString('utf8');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    // calculate string byte size before writing\n    const size = typeof value === 'string'?\n      Buffer.byteLength(value, 'utf8'):\n      value.length;\n    if (size > this._maxLength)\n      throw new XdrWriterError(`got ${value.length} bytes, max allowed is ${this._maxLength}`);\n    // write size info\n    UnsignedInt.write(size, writer);\n    writer.write(value, size);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (typeof value === 'string') {\n      return Buffer.byteLength(value, 'utf8') <= this._maxLength;\n    }\n    if (value instanceof Array || Buffer.isBuffer(value)) {\n      return value.length <= this._maxLength;\n    }\n    return false;\n  }\n}\n","import { XdrCompositeType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Opaque extends XdrCompositeType {\n  constructor(length) {\n    super();\n    this._length = length;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    return reader.read(this._length);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    const {length} = value;\n    if (length !== this._length)\n      throw new XdrWriterError(`got ${value.length} bytes, expected ${this._length}`);\n    writer.write(value, length);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    return Buffer.isBuffer(value) && value.length === this._length;\n  }\n}\n","import { UnsignedInt } from './unsigned-int';\nimport { XdrCompositeType } from './xdr-type';\nimport { XdrReaderError, XdrWriterError } from './errors';\n\nexport class VarOpaque extends XdrCompositeType {\n  constructor(maxLength = UnsignedInt.MAX_VALUE) {\n    super();\n    this._maxLength = maxLength;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    const size = UnsignedInt.read(reader);\n    if (size > this._maxLength)\n      throw new XdrReaderError(`saw ${size} length VarOpaque, max allowed is ${this._maxLength}`);\n    return reader.read(size);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    const {length} = value;\n    if (value.length > this._maxLength)\n      throw new XdrWriterError(`got ${value.length} bytes, max allowed is ${this._maxLength}`);\n    // write size info\n    UnsignedInt.write(length, writer);\n    writer.write(value, length);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    return Buffer.isBuffer(value) && value.length <= this._maxLength;\n  }\n}\n","import { XdrCompositeType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Array extends XdrCompositeType {\n  constructor(childType, length) {\n    super();\n    this._childType = childType;\n    this._length = length;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    // allocate array of specified length\n    const result = new global.Array(this._length);\n    // read values\n    for (let i = 0; i < this._length; i++) {\n      result[i] = this._childType.read(reader);\n    }\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    if (!(value instanceof global.Array))\n      throw new XdrWriterError(`value is not array`);\n\n    if (value.length !== this._length)\n      throw new XdrWriterError(`got array of size ${value.length}, expected ${this._length}`);\n\n    for (const child of value) {\n      this._childType.write(child, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (!(value instanceof global.Array) || value.length !== this._length) {\n      return false;\n    }\n\n    for (const child of value) {\n      if (!this._childType.isValid(child))\n        return false;\n    }\n    return true;\n  }\n}\n","import { UnsignedInt } from './unsigned-int';\nimport { XdrCompositeType } from './xdr-type';\nimport { XdrReaderError, XdrWriterError } from './errors';\n\nexport class VarArray extends XdrCompositeType {\n  constructor(childType, maxLength = UnsignedInt.MAX_VALUE) {\n    super();\n    this._childType = childType;\n    this._maxLength = maxLength;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    const length = UnsignedInt.read(reader);\n    if (length > this._maxLength)\n      throw new XdrReaderError(`saw ${length} length VarArray, max allowed is ${this._maxLength}`);\n\n    const result = new Array(length);\n    for (let i = 0; i < length; i++) {\n      result[i] = this._childType.read(reader);\n    }\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    if (!(value instanceof Array))\n      throw new XdrWriterError(`value is not array`);\n\n    if (value.length > this._maxLength)\n      throw new XdrWriterError(`got array of size ${value.length}, max allowed is ${this._maxLength}`);\n\n    UnsignedInt.write(value.length, writer);\n    for (const child of value) {\n      this._childType.write(child, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (!(value instanceof Array) || value.length > this._maxLength) {\n      return false;\n    }\n    for (const child of value) {\n      if (!this._childType.isValid(child))\n        return false;\n    }\n    return true;\n  }\n}\n","import { Bool } from './bool';\nimport { XdrPrimitiveType } from './xdr-type';\n\nexport class Option extends XdrPrimitiveType {\n  constructor(childType) {\n    super();\n    this._childType = childType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    if (Bool.read(reader)) {\n      return this._childType.read(reader);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    const isPresent = value !== null && value !== undefined;\n\n    Bool.write(isPresent, writer);\n\n    if (isPresent) {\n      this._childType.write(value, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (value === null || value === undefined) {\n      return true;\n    }\n    return this._childType.isValid(value);\n  }\n}","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Void extends XdrPrimitiveType {\n  /* jshint unused: false */\n\n  static read() {\n    return undefined;\n  }\n\n  static write(value) {\n    if (value !== undefined)\n      throw new XdrWriterError('trying to write value to a void slot');\n  }\n\n  static isValid(value) {\n    return value === undefined;\n  }\n}\n","import { Int } from './int';\nimport { XdrPrimitiveType } from './xdr-type';\nimport { XdrReaderError, XdrWriterError } from './errors';\n\nexport class Enum extends XdrPrimitiveType {\n  constructor(name, value) {\n    super();\n    this.name = name;\n    this.value = value;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const intVal = Int.read(reader);\n    const res = this._byValue[intVal];\n    if (res === undefined)\n      throw new XdrReaderError(`unknown ${this.enumName} member for value ${intVal}`);\n    return res;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (!(value instanceof this))\n      throw new XdrWriterError(`unknown ${value} is not a ${this.enumName}`);\n\n    Int.write(value.value, writer);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return value instanceof this;\n  }\n\n  static members() {\n    return this._members;\n  }\n\n  static values() {\n    return Object.values(this._members);\n  }\n\n  static fromName(name) {\n    const result = this._members[name];\n\n    if (!result)\n      throw new TypeError(`${name} is not a member of ${this.enumName}`);\n\n    return result;\n  }\n\n  static fromValue(value) {\n    const result = this._byValue[value];\n    if (result === undefined)\n      throw new TypeError(`${value} is not a value of any member of ${this.enumName}`);\n     return result;\n  }\n\n  static create(context, name, members) {\n    const ChildEnum = class extends Enum {\n    };\n\n    ChildEnum.enumName = name;\n    context.results[name] = ChildEnum;\n\n    ChildEnum._members = {};\n    ChildEnum._byValue = {};\n\n    for (const [key, value] of Object.entries(members)) {\n      const inst = new ChildEnum(key, value);\n      ChildEnum._members[key] = inst;\n      ChildEnum._byValue[value] = inst;\n      ChildEnum[key] = () => inst;\n    }\n\n    return ChildEnum;\n  }\n}","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrDefinitionError } from './errors';\n\nexport class Reference extends XdrPrimitiveType {\n  /* jshint unused: false */\n  resolve() {\n    throw new XdrDefinitionError('\"resolve\" method should be implemented in the descendant class');\n  }\n}\n","import { Reference } from './reference';\nimport { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Struct extends XdrPrimitiveType {\n  constructor(attributes) {\n    super();\n    this._attributes = attributes || {};\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const attributes = {};\n    for (const [fieldName, type] of this._fields) {\n      attributes[fieldName] = type.read(reader);\n    }\n    return new this(attributes);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (!(value instanceof this))\n      throw new XdrWriterError(`${value} is not a ${this.structName}`);\n\n    for (const [fieldName, type] of this._fields) {\n      const attribute = value._attributes[fieldName];\n      type.write(attribute, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return value instanceof this;\n  }\n\n  static create(context, name, fields) {\n    const ChildStruct = class extends Struct {\n    };\n\n    ChildStruct.structName = name;\n\n    context.results[name] = ChildStruct;\n\n    const mappedFields = new Array(fields.length);\n    for (let i = 0; i < fields.length; i++) {\n      const fieldDescriptor = fields[i];\n      const fieldName = fieldDescriptor[0];\n      let field = fieldDescriptor[1];\n      if (field instanceof Reference) {\n        field = field.resolve(context);\n      }\n      mappedFields[i] = [fieldName, field];\n      // create accessors\n      ChildStruct.prototype[fieldName] = createAccessorMethod(fieldName);\n    }\n\n    ChildStruct._fields = mappedFields;\n\n    return ChildStruct;\n  }\n}\n\nfunction createAccessorMethod(name) {\n  return function readOrWriteAttribute(value) {\n    if (value !== undefined) {\n      this._attributes[name] = value;\n    }\n    return this._attributes[name];\n  };\n}\n","import { Void } from './void';\nimport { Reference } from './reference';\nimport { XdrCompositeType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Union extends XdrCompositeType {\n  constructor(aSwitch, value) {\n    super();\n    this.set(aSwitch, value);\n  }\n\n  set(aSwitch, value) {\n    if (typeof aSwitch === 'string') {\n      aSwitch = this.constructor._switchOn.fromName(aSwitch);\n    }\n\n    this._switch = aSwitch;\n    const arm = this.constructor.armForSwitch(this._switch);\n    this._arm = arm;\n    this._armType = arm === Void ? Void : this.constructor._arms[arm];\n    this._value = value;\n  }\n\n  get(armName = this._arm) {\n    if (this._arm !== Void && this._arm !== armName)\n      throw new TypeError(`${armName} not set`);\n    return this._value;\n  }\n\n  switch() {\n    return this._switch;\n  }\n\n  arm() {\n    return this._arm;\n  }\n\n  armType() {\n    return this._armType;\n  }\n\n  value() {\n    return this._value;\n  }\n\n  static armForSwitch(aSwitch) {\n    const member = this._switches.get(aSwitch);\n    if (member !== undefined) {\n      return member;\n    }\n    if (this._defaultArm) {\n      return this._defaultArm;\n    }\n    throw new TypeError(`Bad union switch: ${aSwitch}`);\n  }\n\n  static armTypeForArm(arm) {\n    if (arm === Void) {\n      return Void;\n    }\n    return this._arms[arm];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const aSwitch = this._switchOn.read(reader);\n    const arm = this.armForSwitch(aSwitch);\n    const armType = arm === Void ? Void : this._arms[arm];\n    let value;\n    if (armType !== undefined) {\n      value = armType.read(reader);\n    } else {\n      value = arm.read(reader);\n    }\n    return new this(aSwitch, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (!(value instanceof this))\n      throw new XdrWriterError(`${value} is not a ${this.unionName}`);\n\n    this._switchOn.write(value.switch(), writer);\n    value.armType().write(value.value(), writer);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return value instanceof this;\n  }\n\n  static create(context, name, config) {\n    const ChildUnion = class extends Union {\n    };\n\n    ChildUnion.unionName = name;\n    context.results[name] = ChildUnion;\n\n    if (config.switchOn instanceof Reference) {\n      ChildUnion._switchOn = config.switchOn.resolve(context);\n    } else {\n      ChildUnion._switchOn = config.switchOn;\n    }\n\n    ChildUnion._switches = new Map();\n    ChildUnion._arms = {};\n\n    // resolve default arm\n    let defaultArm = config.defaultArm;\n    if (defaultArm instanceof Reference) {\n      defaultArm = defaultArm.resolve(context);\n    }\n\n    ChildUnion._defaultArm = defaultArm;\n\n    for (const [aSwitch, armName] of config.switches) {\n      const key = typeof aSwitch === 'string' ?\n        ChildUnion._switchOn.fromName(aSwitch) :\n        aSwitch;\n\n      ChildUnion._switches.set(key, armName);\n    }\n\n    // add enum-based helpers\n    // NOTE: we don't have good notation for \"is a subclass of XDR.Enum\",\n    //  and so we use the following check (does _switchOn have a `values`\n    //  attribute) to approximate the intent.\n    if (ChildUnion._switchOn.values !== undefined) {\n      for (const aSwitch of ChildUnion._switchOn.values()) {\n        // Add enum-based constructors\n        ChildUnion[aSwitch.name] = function ctr(value) {\n          return new ChildUnion(aSwitch, value);\n        };\n\n        // Add enum-based \"set\" helpers\n        ChildUnion.prototype[aSwitch.name] = function set(value) {\n          return this.set(aSwitch, value);\n        };\n      }\n    }\n\n    if (config.arms) {\n      for (const [armsName, value] of Object.entries(config.arms)) {\n        ChildUnion._arms[armsName] = (value instanceof Reference) ?\n          value.resolve(context) :\n          value;\n        // Add arm accessor helpers\n        if (value !== Void) {\n          ChildUnion.prototype[armsName] = function get() {\n            return this.get(armsName);\n          };\n        }\n      }\n    }\n\n    return ChildUnion;\n  }\n}\n","// eslint-disable-next-line max-classes-per-file\nimport * as XDRTypes from './types';\nimport { Reference } from './reference';\nimport { XdrDefinitionError } from './errors';\n\nexport * from './reference';\n\nclass SimpleReference extends Reference {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n\n  resolve(context) {\n    const defn = context.definitions[this.name];\n    return defn.resolve(context);\n  }\n}\n\nclass ArrayReference extends Reference {\n  constructor(childReference, length, variable = false) {\n    super();\n    this.childReference = childReference;\n    this.length = length;\n    this.variable = variable;\n  }\n\n  resolve(context) {\n    let resolvedChild = this.childReference;\n    let length = this.length;\n\n    if (resolvedChild instanceof Reference) {\n      resolvedChild = resolvedChild.resolve(context);\n    }\n\n    if (length instanceof Reference) {\n      length = length.resolve(context);\n    }\n\n    if (this.variable) {\n      return new XDRTypes.VarArray(resolvedChild, length);\n    }\n    return new XDRTypes.Array(resolvedChild, length);\n  }\n}\n\nclass OptionReference extends Reference {\n  constructor(childReference) {\n    super();\n    this.childReference = childReference;\n    this.name = childReference.name;\n  }\n\n  resolve(context) {\n    let resolvedChild = this.childReference;\n\n    if (resolvedChild instanceof Reference) {\n      resolvedChild = resolvedChild.resolve(context);\n    }\n\n    return new XDRTypes.Option(resolvedChild);\n  }\n}\n\nclass SizedReference extends Reference {\n  constructor(sizedType, length) {\n    super();\n    this.sizedType = sizedType;\n    this.length = length;\n  }\n\n  resolve(context) {\n    let length = this.length;\n\n    if (length instanceof Reference) {\n      length = length.resolve(context);\n    }\n\n    return new this.sizedType(length);\n  }\n}\n\nclass Definition {\n  constructor(constructor, name, cfg) {\n    this.constructor = constructor;\n    this.name = name;\n    this.config = cfg;\n  }\n\n  // resolve calls the constructor of this definition with the provided context\n  // and this definitions config values.  The definitions constructor should\n  // populate the final type on `context.results`, and may refer to other\n  // definitions through `context.definitions`\n  resolve(context) {\n    if (this.name in context.results) {\n      return context.results[this.name];\n    }\n\n    return this.constructor(context, this.name, this.config);\n  }\n}\n\n// let the reference resolution system do its thing\n// the \"constructor\" for a typedef just returns the resolved value\nfunction createTypedef(context, typeName, value) {\n  if (value instanceof Reference) {\n    value = value.resolve(context);\n  }\n  context.results[typeName] = value;\n  return value;\n}\n\nfunction createConst(context, name, value) {\n  context.results[name] = value;\n  return value;\n}\n\nclass TypeBuilder {\n  constructor(destination) {\n    this._destination = destination;\n    this._definitions = {};\n  }\n\n  enum(name, members) {\n    const result = new Definition(XDRTypes.Enum.create, name, members);\n    this.define(name, result);\n  }\n\n  struct(name, members) {\n    const result = new Definition(XDRTypes.Struct.create, name, members);\n    this.define(name, result);\n  }\n\n  union(name, cfg) {\n    const result = new Definition(XDRTypes.Union.create, name, cfg);\n    this.define(name, result);\n  }\n\n  typedef(name, cfg) {\n    const result = new Definition(createTypedef, name, cfg);\n    this.define(name, result);\n  }\n\n  const(name, cfg) {\n    const result = new Definition(createConst, name, cfg);\n    this.define(name, result);\n  }\n\n  void() {\n    return XDRTypes.Void;\n  }\n\n  bool() {\n    return XDRTypes.Bool;\n  }\n\n  int() {\n    return XDRTypes.Int;\n  }\n\n  hyper() {\n    return XDRTypes.Hyper;\n  }\n\n  uint() {\n    return XDRTypes.UnsignedInt;\n  }\n\n  uhyper() {\n    return XDRTypes.UnsignedHyper;\n  }\n\n  float() {\n    return XDRTypes.Float;\n  }\n\n  double() {\n    return XDRTypes.Double;\n  }\n\n  quadruple() {\n    return XDRTypes.Quadruple;\n  }\n\n  string(length) {\n    return new SizedReference(XDRTypes.String, length);\n  }\n\n  opaque(length) {\n    return new SizedReference(XDRTypes.Opaque, length);\n  }\n\n  varOpaque(length) {\n    return new SizedReference(XDRTypes.VarOpaque, length);\n  }\n\n  array(childType, length) {\n    return new ArrayReference(childType, length);\n  }\n\n  varArray(childType, maxLength) {\n    return new ArrayReference(childType, maxLength, true);\n  }\n\n  option(childType) {\n    return new OptionReference(childType);\n  }\n\n  define(name, definition) {\n    if (this._destination[name] === undefined) {\n      this._definitions[name] = definition;\n    } else {\n      throw new XdrDefinitionError(`${name} is already defined`);\n    }\n  }\n\n  lookup(name) {\n    return new SimpleReference(name);\n  }\n\n  resolve() {\n    for (const defn of Object.values(this._definitions)) {\n      defn.resolve({\n        definitions: this._definitions,\n        results: this._destination\n      });\n    }\n  }\n}\n\nexport function config(fn, types = {}) {\n  if (fn) {\n    const builder = new TypeBuilder(types);\n    fn(builder);\n    builder.resolve();\n  }\n\n  return types;\n}","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(899);\n"],"names":["root","factory","exports","module","define","amd","this","require","XdrWriterError","TypeError","constructor","message","super","XdrReaderError","XdrDefinitionError","XdrNotImplementedDefinitionError","XdrReader","source","Buffer","isBuffer","Array","from","_buffer","_length","length","_index","eof","advance","size","padding","i","rewind","read","subarray","readInt32BE","readUInt32BE","readBigInt64BE","readBigUInt64BE","readFloatBE","readDoubleBE","ensureInputConsumed","BUFFER_CHUNK","XdrWriter","buffer","allocUnsafe","alloc","resize","minRequiredSize","newLength","Math","ceil","newBuffer","copy","finalize","toArray","write","value","offset","fill","writeInt32BE","writeUInt32BE","writeBigInt64BE","writeBigUInt64BE","writeFloatBE","writeDoubleBE","static","XdrType","toXDR","format","arguments","undefined","writer","encodeResult","fromXDR","input","reader","decodeInput","result","validateXDR","e","XdrPrimitiveType","XdrCompositeType","isValid","InvalidXdrEncodingFormatError","toString","MAX_VALUE","MIN_VALUE","Int","sliceBigInt","iSize","sliceSize","total","shift","BigInt","asIntN","calculateBigIntBoundaries","unsigned","boundary","LargeInt","args","_value","parts","RangeError","valueOf","asUintN","min","max","precision","formatIntName","encodeBigIntFromBits","slice","toJSON","toBigInt","prototype","reverse","name","part","string","Hyper","_len","_key","low","Number","high","defineIntBoundaries","UnsignedInt","UnsignedHyper","Float","Double","Quadruple","Bool","intVal","String","maxLength","_maxLength","readString","byteLength","Opaque","VarOpaque","childType","_childType","global","child","VarArray","Option","isPresent","Void","Enum","res","_byValue","enumName","_members","Object","values","context","members","ChildEnum","results","key","entries","inst","Reference","resolve","Struct","attributes","_attributes","fieldName","type","_fields","structName","attribute","fields","ChildStruct","mappedFields","fieldDescriptor","field","createAccessorMethod","Union","aSwitch","set","_switchOn","fromName","_switch","arm","armForSwitch","_arm","_armType","_arms","get","armName","switch","armType","member","_switches","_defaultArm","unionName","config","ChildUnion","switchOn","Map","defaultArm","switches","arms","armsName","SimpleReference","definitions","ArrayReference","childReference","variable","resolvedChild","XDRTypes","OptionReference","SizedReference","sizedType","Definition","cfg","createTypedef","typeName","createConst","TypeBuilder","destination","_destination","_definitions","enum","create","struct","union","typedef","const","void","bool","int","hyper","uint","uhyper","float","double","quadruple","opaque","varOpaque","array","varArray","option","definition","lookup","defn","fn","types","builder","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","extraBytes","maxChunkLength","len2","push","encodeChunk","join","Uint8Array","code","Error","indexOf","start","end","num","output","base64","ieee754","customInspectSymbol","Symbol","K_MAX_LENGTH","createBuffer","buf","setPrototypeOf","arg","encodingOrOffset","encoding","isEncoding","actual","fromString","ArrayBuffer","isView","arrayView","isInstance","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","b","obj","checked","numberIsNaN","isArray","data","fromObject","toPrimitive","assertSize","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","m","bidirectionalIndexOf","val","dir","arrayIndexOf","call","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","j","hexWrite","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","c","hi","lo","utf16leToBytes","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","poolSize","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","toLocaleString","equals","inspect","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readBigInt64LE","readFloatLE","readDoubleLE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeBigUInt64LE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeBigInt64LE","writeFloatLE","writeDoubleLE","targetStart","copyWithin","errors","E","sym","getMessage","Base","writable","configurable","stack","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","floor","ERR_BUFFER_OUT_OF_BOUNDS","msg","received","isInteger","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","split","base64clean","src","dst","alphabet","table","i16","BufferBigIntNotDefined","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","isNaN","log","LN2","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","o","g","globalThis","Function","window","prop","hasOwnProperty","r","toStringTag"],"sourceRoot":""}